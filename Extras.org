Extra 1)

#+BEGIN_SRC java
//pseudocodigo retirado da wikipedia do compare and exchange : 
//https://en.wikipedia.org/wiki/Compare-and-swap
function cas(p : pointer to int, old : int, new : int) returns bool {
    if *p ≠ old {
        return false
    }
    *p ← new
    return true
}

// tas with compare exchange
int true = 1; int false = 0;
function tasWCXchg(int valor){
	// como o tas retorna o valor antigo
	// precisamos negar o cas ( que retorna true se forem iguais)
	// como exemplo, se o valor de valor for false o nosso cas retornaria 
	// true, o que nao é o novo valor e sim o valor já mudado.
	// entao, o valor antigo é só negarmos;
	return !cas(valor,false,true);
}

#+END_SRC java

Extra 2)
#+BEGIN_SRC java
//pseudocodigo retirado da wikipedia do compare and exchange : 
//https://en.wikipedia.org/wiki/Compare-and-swap
function cas(p : pointer to int, old : int, new : int) returns bool {
 	// tas sempre troca valores
 	// tas retorna o valor antigo
 	// cas so troca se forem iguais 
    if *p ≠ old {
        return false
    }
    // retorna sempre true, uma vez que sao iguais
    // depois faz a alteracao do valor, onde 
    // p = new
    // e o ou logico ( || ) sempre vai retornar true
    // return  true || false
    tasval <- tas(p,new)
    return tasval || !tasval
}
#+END_SRC java


Extra 3)

O número de consenso do test-and-set é 2, já o número de consenso do compare-and-swap é infinito. Já de cara, percebemos que que tentar implementar CAS com TAS, não é possível que a solução não possua loops, pois precisamos de um while com o TAS em um lock.
